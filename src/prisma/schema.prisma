generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -- ---- -- Admin -- ---- -- //
model Admin {
  id               Int                @id @default(autoincrement())
  first_name       String             @db.VarChar(30)
  last_name        String             @db.VarChar(30)
  email            String             @db.VarChar(60) @unique
  phone_number     String
  role             Admin_role
  profile_image    String
  password         String
  token            String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt

  user             User[]
  organization     Organization[]
  service_provider Service_provider[]
  job_post         Job_post[]
  news             News[]
  tender           Tender[]
  grant            Grant[]
  blog             Blog[]
  exclusive_job    Exclusive_job[]
  recommender      Recommender[]
}

enum Admin_role {
  SUPER_ADMIN
  ADMIN
}


// -- ---- -- User -- ---- -- //
model User {
  id                Int        @id @default(autoincrement())
  username          String?    @db.VarChar(30)
  first_name        String     @db.VarChar(30)
  last_name         String     @db.VarChar(30)
  email             String     @unique @db.VarChar(60)
  phone_number      String?    @unique @db.Char(12)
  profile_image     String?
  location          Json?
  verified_by       Int?
  password          String
  token             String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @default(now()) @updatedAt

  admin         Admin?      @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  job_post      Job_post[]
  tender        Tender[]
  blog          Blog[]
  saved_organization            Saved_organization[]
  saved_service_provider        Saved_service_provider[]
  saved_grant                   Saved_grant[]
  saved_news                    Saved_news[]
  saved_blog                    Saved_blog[]
  saved_tender                  Saved_tender[]
  saved_job                     Saved_job[]
}

// -- ---- -- Tag -- ---- -- //
model Tag {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(20) @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  job_post   Job_post[]
  news       News[]
  tender     Tender[]
  grant      Grant[]
  blog        Blog[]

}

// -- ---- -- Organization -- ---- -- //
model Organization_category {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(100)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt

  organization Organization[]
}

model Organization {
  id                Int                   @id @default(autoincrement())
  name              String                @unique @db.VarChar(100)
  email             String                @unique @db.VarChar(60)
  about             String                @db.Text
  location          Json
  category          Int
  verified_by       Int?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @default(now()) @updatedAt

  organization_type     Organization_category   @relation(fields: [category], references: [id], onUpdate: Cascade, onDelete: Cascade)
  admin                 Admin?                  @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  saved_organization    Saved_organization[]
}

model Saved_organization {
    user            Int
    organization    Int

    @@id([user, organization])

    user_            User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    organization_    Organization        @relation(fields: [organization], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Service_provider -- ---- -- //
model Service_provider_category {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(100)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt

  service_provider Service_provider[]
}

model Service_provider {
  id               Int                       @id @default(autoincrement())
  name             String                    @unique @db.VarChar(100)
  category         Int
  about            String                    @db.Text
  verified_by      Int
  created_at       DateTime                  @default(now())
  updated_at       DateTime                  @default(now()) @updatedAt

  service_category Service_provider_category @relation(fields: [category], references: [id], onUpdate: Cascade, onDelete: Cascade)
  admin            Admin                     @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post             Service_provider_post[]
  Saved_service_provider    Saved_service_provider[]
}

model Service_provider_post {
  id               Int              @id @default(autoincrement())
  content          String
  description      String
  posted_by        Int
  created_at       DateTime
  updated_at       DateTime

  service_provider Service_provider @relation(fields: [posted_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Saved_service_provider {
    user                Int
    service_provider    Int

    @@id([user, service_provider])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    service_provider_   Service_provider    @relation(fields: [service_provider], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Job -- ---- -- //
model Job_category {
  id         Int        @id @default(autoincrement())
  name       String     @unique @db.VarChar(30)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  job_posts  Job_post[]
}

model Salary {
  id          Int         @id @unique
  low_end     Float
  high_end    Float
  periodicity Periodicity
  currency    String
  job         Job_post    @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Job_post {
  id                 Int           @id @default(autoincrement())
  title              String
  overview           String        @db.Text
  body               String        @db.LongText
  contract_type      Contract_type
  year_of_experience Int
  thumbnail          String
  category           Int
  closing_date       DateTime
  verified_at        DateTime
  verified_by        Int
  posted_by          Int
  created_at         DateTime      @default(now())
  updated_at         DateTime      @default(now()) @updatedAt

  user               User          @relation(fields: [posted_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  admin              Admin         @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  job_category       Job_category  @relation(fields: [category], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags               Tag[]
  salary             Salary?
  saved_job_post     Saved_job[]
}

enum Contract_type {
  REMOTE
  PARTIME
  FULLTIME
  CONTRACT
}

enum Periodicity {
  HOURLY
  MONTHLY
  WEEKLY
  DAILY
}

model Saved_job {
    user                Int
    job    Int

    @@id([user, job])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    job_                Job_post            @relation(fields: [job], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- News -- ---- -- //
model News {
  id         Int      @id @default(autoincrement())
  title      String
  overview   String
  thumbnail  String
  body       String   @db.LongText
  posted_by  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  admin      Admin    @relation(fields: [posted_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags       Tag[]
  saved_job  Saved_news[]
}

model Saved_news {
    user                Int
    news                Int

    @@id([user, news])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    news_               News                @relation(fields: [news], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Tender -- ---- -- //
model Tender_category {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  tender     Tender[]
}

model Tender {
  id                  Int             @id @default(autoincrement())
  title               String
  overview            String
  body                String          @db.LongText
  price               Float?
  starting_bid        Float
  oppeortunity_number Int
  CFDA                String
  eligibility         Boolean
  status              String
  category            Int
  opening_date        DateTime
  closing_date        DateTime
  posted_by           Int
  verified_by         Int
  created_at          DateTime        @default(now())
  updated_at          DateTime        @default(now()) @updatedAt

  admin               Admin           @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user                User            @relation(fields: [posted_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tender_category     Tender_category @relation(fields: [category], references: [id], onUpdate: Cascade, onDelete: Cascade)
  files               Tender_files[]
  tags                Tag[]
  saved_tender        Saved_tender[]
}

model Tender_files {
  id         Int      @id @default(autoincrement())
  file       String
  tender_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  tender     Tender   @relation(fields: [tender_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Saved_tender {
    user                Int
    tender                Int

    @@id([user, tender])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    tender_             Tender              @relation(fields: [tender], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Grant -- ---- -- //
model Grant {
  id          Int      @id @default(autoincrement())
  title       String
  overview    String
  body        String   @db.LongText
  location    String
  verified_by Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  admin       Admin    @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags        Tag[]
  grant       Saved_grant[]
}

model Saved_grant {
    user                Int
    grant                Int

    @@id([user, grant])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    grant_              Grant               @relation(fields: [grant], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Blog -- ---- -- //
model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  overview    String
  body        String   @db.LongText
  posted_by   Int
  verified_by Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  admin       Admin    @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User     @relation(fields: [posted_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tags        Tag[]
  saved_blog  Saved_blog[]
}

model Saved_blog {
    user                Int
    blog                Int

    @@id([user, blog])

    user_               User                @relation(fields: [user], references: [id], onUpdate: Cascade, onDelete: Cascade)
    blog_               Blog                @relation(fields: [blog], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// -- ---- -- Exclusiv job -- ---- -- //
model Exclusive_job {
    id              Int         @id @default(autoincrement())
    title           String
    body            String      @db.LongText
    verified_by     Int
    created_at      DateTime    @default(now())
    updated_at      DateTime    @default(now()) @updatedAt

    admin           Admin       @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
    recommended_applicants      Recommended_Applicants[]
}

model Recommender {
    id              Int         @id @default(autoincrement())
    first_name      String      @db.VarChar(30)
    last_name       String      @db.VarChar(30)
    email           String      @db.VarChar(60)
    password        String
    verified_by     Int
    created_at      DateTime    @default(now())
    updated_at      DateTime    @default(now()) @updatedAt

    admin           Admin       @relation(fields: [verified_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
    recommended_applicants      Recommended_Applicants[]
}

model Recommended_Applicants {
    id              Int         @id @default(autoincrement())
    first_name      String      @db.VarChar(30)
    last_name       String      @db.VarChar(30)
    cv              String
    job             Int
    recommender     Int
    recommendation_letter       String
    created_at      DateTime    @default(now())
    updated_at      DateTime    @default(now()) @updatedAt

    exclusive_job   Exclusive_job   @relation(fields: [job], references: [id], onUpdate: Cascade, onDelete: Cascade)
    recommender_    Recommender     @relation(fields: [recommender], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
